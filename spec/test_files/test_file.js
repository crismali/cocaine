// Generated by CoffeeScript 1.6.3
var Animal, Dog, Tail, animals, array, bark_results, dog, hash, hash2, house, lambda, proc,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __slice = [].slice;

Animal = (function() {
  Animal.prototype.name = function() {
    return this._name;
  };

  function Animal(name) {
    this.fight_bang = __bind(this.fight_bang, this);
    this.fight = __bind(this.fight, this);
    this.owner_present = __bind(this.owner_present, this);
    this.owner = __bind(this.owner, this);
    this.legs = __bind(this.legs, this);
    this.add_two = __bind(this.add_two, this);
    this.add = __bind(this.add, this);
    this.multiply = __bind(this.multiply, this);
    this.sound = __bind(this.sound, this);
    this.say_name = __bind(this.say_name, this);
    this.name = __bind(this.name, this);
    if (name == null) {
      name = "Steve";
    }
    this._name = name;
  }

  Animal.prototype.say_name = function() {
    return this._name;
  };

  Animal.prototype.sound = function() {
    return "roar!";
  };

  Animal.prototype.multiply = function(a, b) {
    return a * b;
  };

  Animal.prototype.add = function(a, b) {
    return a + b;
  };

  Animal.prototype.add_two = function(a) {
    a = a + 2;
    return a;
  };

  Animal.prototype.legs = function() {
    return 4;
  };

  Animal.prototype.owner = function() {
    return this._owner;
  };

  Animal.prototype.owner_present = function() {
    return this.owner() ? true : false;
  };

  Animal.prototype.fight = function() {
    return "fighting!";
  };

  Animal.prototype.fight_bang = function() {
    this._fighting = true;
    return "fighting!";
  };

  Animal.count = function() {
    return "There are some animals, probably";
  };

  return Animal;

}).call(this);

Tail = (function() {
  function Tail() {
    this.wag = __bind(this.wag, this);
  }

  Tail.prototype.wag = function() {
    return "wagging tail";
  };

  return Tail;

})();

4 < 5;

Dog = (function(_super) {
  __extends(Dog, _super);

  Dog.include(Tail);

  Dog.prototype.tail_state = function() {
    return this._tail_state;
  };

  Dog.DOGHOUSE = "roomy";

  function Dog(name) {
    this.name_via_method = __bind(this.name_via_method, this);
    this.rename = __bind(this.rename, this);
    this.bark = __bind(this.bark, this);
    this.block_door = __bind(this.block_door, this);
    this.tail_state = __bind(this.tail_state, this);
    this.tail_state = "tired";
    Dog.__super__.constructor.apply(this, args);
  }

  Dog.prototype.block_door = function(block) {
    return block();
  };

  Dog.prototype.bark = function() {
    var args, sound;
    sound = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    args.size();
    this.multiply.apply(this, args);
    return sound;
  };

  Dog.prototype.rename = function(name) {
    return this._name = name;
  };

  Dog.prototype.name_via_method = function() {
    return this._name;
  };

  return Dog;

})(Animal);

dog = Dog["new"];

dog.name;

dog.wag();

bark_results = dog.bark(2, 3);

animals = [];

animals.push(Animal["new"]);

animals.push(Animal["new"]);

dog.multiply(4, 4);

dog.leash = "a blue one";

if (dog.leash == null) {
  dog.leash = "a red one";
}

house = Dog.DOGHOUSE;

animals.each(function(animal) {
  return animal.sound;
});

animals.each(function(animal) {
  return animal.say_name;
});

hash = {
  dog: dog,
  animal: animals.first()
};

hash = {
  "dog": dog,
  "animal": animals.first()
};

hash = {
  "5": dog,
  "animal": animals.first()
};

hash2 = {};

hash2[dog] = animals.first();

array = [1, 3, 4, "what", 'what'];

lambda = function(x) {
  return x.inspect;
};

proc = function(x) {
  return x.inspect;
};

try {
  dog.meow();
} catch (_error) {
  "that's not a thing you're allowed to do";
} finally {
  "please don't do that again";
}

if (dog != null) {
  null;
}

if (dog == null) {
  cat;
}

if ((dog.respond_to_present(meow)) != null) {
  dog.meow();
} else if ((dog.kind_of_present(Dog)) != null) {
  dog.bark();
} else {
  dog.wag();
}

if (dog == null) {
  cat;
}

animals.map(function(x) {
  return x["fight"]();
});

animals.map(function(x) {
  return x["fight"]();
});
